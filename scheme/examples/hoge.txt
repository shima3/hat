(include "util.sch")

(defineCPS port_close ^($port . return)
  (lambda(port)
    (display "port_close\n")
    (close-port port)
    ) $port ^(dummy)
  return)

(defineCPS file_input ^(file_name)
  file_name ^($file_name)
  (lambda(file_name)
    (open-input-file file_name)
    ) $file_name ^($port)
  fix
  (^(self out . break)
    when(object_eof? out)
    ( port_close $port ^()
      break )^()
    (lambda(port)
      (read-char port)
      ) $port ^($c)
    when(object_eof? $c)
    ( port_close $port ^()
      break )^()
    out $c ^(out2)
    self out2 . break))

(defineCPS port_in_autoclose ^($port)
  delay
  (^ return
    port_read_char $port ^($ch)
    port_in_autoclose $port ^($in)
    when(object_eof? $ch)
    ( port_close $port ^()
      print("autoclose\n")^()
      return seq_end )^()
    return (^($out) $out $ch . $in)
    ))

(defineCPS file_input2 ^(file_name)
  file_name ^($file_name)
  (lambda(file_name)
    (open-input-file file_name)
    ) $file_name ^($port)
  port_in_autoclose $port)

(defineCPS file_output ^(file_name)
  file_name ^($file_name)
  (lambda(file_name)
    (open-output-file file_name)
    ) $file_name ^($port)
  fix
  (^(self obj)
    (lambda(obj port)
      (if(eof-object? obj)
        (begin
          (close-port port)
          (display "close output")
          )
        (display obj port))
      ) obj $port ^(dummy)
    self))

(defineCPS main ^()
  (lambda()
    (eof-object))^(EOF)
  file_input2 "file.sch" ^(in)
;;  (^(h) h 1 ^(h) h 2 ^(h) h 3 . seq_end)^(in)
;;  seq_print in ", " ^()
  file_output "hoge.txt" ^(out)
  in out ^(in2)
;;  in2 EOF ^(in3)
  print("world\n")^()
  out EOF ^(out2)
  print(out2)^()
;;  out "hello " #\a "world\n" EOF ^(out)
  exit 0)
