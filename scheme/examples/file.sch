(include "util.sch")

(defineCPS port_in_autoclose ^($port)
  delay
  (^ return
    port_read_char $port ^($ch)
    port_in_autoclose $port ^($in)
    when(object_eof? $ch)
    ( port_close $port ^()
      print("autoclose\n")^()
      return empty_seq )^()
    return
    (^($out . return)
      when(object_eof? $out)
      ( port_close $port ^()
        return empty_seq )^()
      $out $ch . $in)
    ))

(defineCPS file_input2 ^(file_name)
  file_name ^($file_name)
  (lambda(file_name)
    (open-input-file file_name)
    ) $file_name ^($port)
  port_in_autoclose $port)

(defineCPS file_output ^(file_name)
  file_name ^($file_name)
  (lambda(file_name)
    (open-output-file file_name)
    ) $file_name ^($port)
  fix
  (^(self obj)
    (lambda(obj port)
      (if(eof-object? obj)
        (begin
          (close-port port)
          (display "close output")
          )
        (display obj port))
      ) obj $port ^(dummy)
    self))

(defineCPS main2 ^()
  (^(h) h 1 ^(h) h 2 ^(h) h 3 . empty_seq)^(in)
  (lambda()
    (eof-object))^(EOF)
  file_input2 "file.sch" ^(in)
;;  seq_print in ", " ^()
  file_output "hoge.txt" ^(out)
  in out ^(in2)
;;  in2 EOF ^(in3)
  print("world\n")^()
  out EOF ^(out2)
  print(out2)^()
;;  out "hello " #\a "world\n" EOF ^(out)
  exit 0)

(defineCPS main ^()
  (^(f)
    (^(x) f (x x))
    (^(x) f (x x))
    )^(Y)
  Y
  (^(loop x . break)
    unless(> x 0) break ^()
    print(x "\n")^()
    - x 1 ^(x-1)
    loop x-1 . break
    ) 10 ^()
  exit 0)
